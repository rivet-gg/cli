{
	"tasks": {
		// Runs the CLI
		"cli:run": "deno task artifacts:build && deno task cli:run:dirty",
		"cli:run:dirty": "deno run -A --check packages/cli/main.ts --project tests/basic",

		// Specific CLI tasks
		"cli:run:build": "deno task cli:run build",
		"cli:run:clean_build": "deno task artifacts:build && deno task cli:run:dirty clean && deno task cli:run build",

		// Installs the CLI on the local machine
		"cli:install": "deno task artifacts:build && deno install --allow-net --allow-read --allow-env --allow-run --allow-write --allow-sys --name opengb --force --config deno.jsonc packages/cli/main.ts",

		// Build Dockerfile
		"docker:build": "docker build -t opengb -f cli.Dockerfile .",

		// Generates schema
		"artifacts:build": "deno task format && deno task artifacts:build:runtime && deno task artifacts:build:dynamic && deno task artifacts:build:drizzle",
		"artifacts:build:runtime": "deno run --allow-env --allow-read --allow-write scripts/artifacts/build_runtime_archive.ts",
		"artifacts:build:dynamic": "deno run --allow-env --allow-read --allow-write scripts/artifacts/build_dynamic_archive.ts",
		"artifacts:build:drizzle": "deno run --node-modules-dir --allow-env --allow-read --allow-write scripts/artifacts/build_drizzle.ts",

		// Format
		"format": "deno fmt packages/",
		"format:check": "deno fmt --check packages/",

		// Check
		"check": "deno task artifacts:build && deno check packages/**/*.ts",
		"check:dirty": "deno check packages/**/*.ts",

		// Lint
		"lint": "deno task artifacts:build && deno lint packages/",
		"lint:dirty": "deno lint packages/",
		"lint:fix": "deno task artifacts:build && deno lint --fix packages/",

		// Runs tests
		"test:core": "deno task artifacts:build && deno test -A packages/",
		"test:project": "deno task cli:run test --strict-schemas --force-deploy-migrations",
		"test:registry": "deno task artifacts:build && deno run -A --check packages/cli/main.ts --path ../opengb-modules/tests/basic test --strict-schemas --force-deploy-migrations"
	},
	"lint": {
		"include": ["packages/"],
		"exclude": ["tests/"],
		"rules": {
			"exclude": ["no-empty-interface", "no-explicit-any", "require-await"]
		}
	},
	"fmt": {
		"lineWidth": 120,
		"useTabs": true
	},
	"imports": {
		"@asteasolutions/zod-to-openapi": "npm:@asteasolutions/zod-to-openapi@^7.1.1",
		"@bartlomieju/postgres": "jsr:@bartlomieju/postgres@^0.17.2",
		"@cliffy/command": "jsr:@cliffy/command@^1.0.0-rc.5",
		"@luca/esbuild-deno-loader": "jsr:@luca/esbuild-deno-loader@^0.10.3",
		"@std/assert": "jsr:@std/assert@^1.0.3",
		"@std/async": "jsr:@std/async@^1.0.4",
		"@std/collections": "jsr:@std/collections@^1.0.5",
		"@std/crypto": "jsr:@std/crypto@^1.0.3",
		"@std/encoding": "jsr:@std/encoding@^1.0.3",
		"@std/fmt": "jsr:@std/fmt@^1.0.1",
		"@std/fs": "jsr:@std/fs@^1.0.2",
		"@std/path": "jsr:@std/path@^1.0.3",
		"@ts-morph/ts-morph": "jsr:@ts-morph/ts-morph@^23.0.0",
		"cloudflare:workers": "npm:@cloudflare/workers-types",
		"dedent": "npm:dedent@^1.5.3",
		"esbuild": "npm:esbuild@^0.21.5",
		"glob": "npm:glob@^11.0.0",
		"typescript-json-schema": "npm:typescript-json-schema@^0.62.0",
		"zod": "npm:zod@^3.23.8",
		"zod-validation-error": "npm:zod-validation-error@^3.3.1"
	},
	"compilerOptions": {
		"strict": true,
		"noImplicitAny": true,
		"strictNullChecks": true,
		"strictFunctionTypes": true,
		"strictBindCallApply": true,
		"strictPropertyInitialization": true,
		"noImplicitThis": true,
		"useUnknownInCatchVariables": true,
		"alwaysStrict": true,
		// "noUnusedLocals": true,
		// "noUnusedParameters": true,
		// "exactOptionalPropertyTypes": true,
		"noImplicitReturns": true,
		"noFallthroughCasesInSwitch": true,
		"noUncheckedIndexedAccess": true,
		"noImplicitOverride": true,
		// "noPropertyAccessFromIndexSignature": true,
		"allowUnusedLabels": true,
		"allowUnreachableCode": true,
		"noImplicitAny": true
	}
}
